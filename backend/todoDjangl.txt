### Setup, Installation, Configuration 
pipenv shell
pipenv install Django
django-admin startproject project .
pipenv install -r requirements.txt [a list of packages]
	pip install pip-upgrader
	pip-upgrade
pipenv run pip freeze

python manage.py startapp core, userauths, api


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # add your app here
    'core',  
    'userauths',  
    'api',  
]

python manage.py runserver


### Create SuperUser, Configuration Jazzmin Admin UI
pipenv shell
python manage.py runserver
python manage.py migrate
python manage.py createsuperuser (with name, email, password)

INSTALLED_APPS = [
    'jazzmin',

    'django.contrib.admin',
    [...]
]

JAZZMIN_SETTINGS = {
    "site_title": "Learning Management System Admin", 
    "site_header": "Learning Management System with Django and React",
    "site_brand": "the ict park",
    "welcome_sign": "Welcome to the Learning Management System",
    "copyright": "the ict park",
    "show_ui_builder": True
}

JAZZMIN_UI_TWEAKS = {

}


### Config Media, Static & template

import os
'DIRS': [os.path.join(BASE_DIR, 'templates')],
Create "templates" in root directory 

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = BASE_DIR / 'templates'
MEDIA_URL = '/Media/'
MEDIA_ROOT = BASE_DIR / 'Media'
Create "static" in root directory 


### Config urls.py for static
from django.conf import settings
from django.conf.urls.static import static

urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)


### Customize user and profile 

Create CustomUser and UserProfile models in models.py
Register in admin.py 

add CustomUser in settings.py 
    AUTH_USER_MODEL = 'userauths.CustomUser'

python manage.py migrations
python manage.py migrate
python manage.py createsuperuser (with email, name, password)
    after migrations [comment]
        #'jazzmin',
        #'django.contrib.admin',
        #path('admin/', admin.site.urls),
    before migrations [uncomment]    

### Create profile automatically with signal 

from django.db.models.signals import post_save in models.py

create in models.py
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)   
        
def save_user_profile(sender, instance, **kwargs):
    instance.userprofile.save()
    
post_save.connect(create_user_profile, sender=CustomUser)
post_save.connect(save_user_profile, sender=CustomUser)


### models Serialize
create a new file called serializer.py in api directory

add code 
from rest_framework import serializers
from userauths.models import CustomUser, UserProfile

class CustomUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        fields = '__all__'

class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserProfile
        fields = '__all__'

### JWT token Authentication 

Add third party apps in INSTALLED_APPS = []
'rest_framework',
'rest_framework.simplejwt.token_blacklist',
'corsheaders',

Add middleware in MIDDLEWARE = []
'corsheaders.middleware.CorsMiddleware',

Add SIMPLE_JWT = {}
from https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html#revoke-token-claim

Add CORS_ALLOW_ALL_ORIGINS = True


### Login serializer 
Add 
from rest_framework_simplejwt.serializer import TokenObtainPairSerializer in serializer.py of api

Create class serializer.py of api
class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):
    @classmethod
    def get_token(cls, user):
        token = super().get_token(user)
        # Add custom claims
        token['full_name'] = user.full_name
        token['email'] = user.email
        token['username'] = user.username
        return token

Add 
from api import serializer as api_serializer
from rest_framework_simplejwt.views import TokenObtainPairView
    in views of api

also add in views of api
class CustomTokenObtainPairView(TokenObtainPairView):
    serializer_class = api_serializer.CustomTokenObtainPairSerializer

create urls.py in api and add
from api import views as api_views
from django.urls import path

urlpatterns = [
    path('user/token/', api_views.CustomTokenObtainPairView.as_view(), name='custom_token_obtain_pair'),
]

also add in urls.py of project
from django.urls import path, include
path('api/v1/', include('api.urls')),